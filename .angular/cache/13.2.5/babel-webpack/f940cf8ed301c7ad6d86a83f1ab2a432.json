{
  "ast": null,
  "code": "import { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { UsersComponent } from './users/users.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppareilService } from './services/appareil.service';\nimport { UserService } from './services/user.service';\nimport { AuthComponent } from './auth/auth.component';\nimport { UserViewComponent } from './user-view/user-view.component';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from './services/auth.service';\nimport { SingleUserComponent } from './single-user/single-user.component';\nimport { Error404Component } from './error404/error404.component';\nimport { AuthGuardService } from './services/auth-guard.service';\nimport { EditUserComponent } from './edit-user/edit-user.component';\nimport { UserModelListComponent } from './user-model-list/user-model-list.component';\nimport { UserModelService } from './services/user-model.service';\nimport { NewUserModelComponent } from './new-user-model/new-user-model.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\n/**\r\n * Declaration des routes correspondant aux composant que l'on appelle grace aux URLs\r\n * La param canActivate correspond au guard qui empeche tous utilisateurs non connectés d'acceder à cette route\r\n */\n\nconst appRoutes = [{\n  path: 'users',\n  canActivate: [AuthGuardService],\n  component: UserViewComponent\n}, {\n  path: 'auth',\n  component: AuthComponent\n}, {\n  path: 'user',\n  canActivate: [AuthGuardService],\n  component: UsersComponent\n}, {\n  path: 'users/:id',\n  canActivate: [AuthGuardService],\n  component: SingleUserComponent\n}, {\n  path: 'user',\n  canActivate: [AuthGuardService],\n  component: UserViewComponent\n}, {\n  path: 'user-model-list',\n  component: UserModelListComponent\n}, {\n  path: 'new-user-model',\n  component: NewUserModelComponent\n}, {\n  path: 'edit-user',\n  canActivate: [AuthGuardService],\n  component: EditUserComponent\n}, {\n  path: 'not-found',\n  component: Error404Component\n}, {\n  path: '',\n  canActivate: [AuthGuardService],\n  component: UserViewComponent\n}, {\n  path: '**',\n  redirectTo: '/not-found'\n} // path wildcard : redirection vers la page 404. IL EST ESSENTIEL DE METTRE LE PATH WILDCARD A\n// LA FIN DES PATH, car Angular regarde les path dans l'rodre de declaration. Si le wildcard est au milieu du tab de path, si Angular\n// tombe sur le wildcard, n'importe quelle route correspond au wildcard, et donc, tous les urls rentrés vont correspondre à ce wildcard\n];\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {}\n\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)();\n  };\n\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [// Injection du service au niveau du module : une seule instance crééé\n    AppareilService, UserService, AuthService, AuthGuardService, UserModelService],\n    imports: [[BrowserModule, FormsModule, ReactiveFormsModule, HttpClientModule, RouterModule.forRoot(appRoutes) //Ca dit que toutes les routes qu'on veut enregistrer dans ce projet se trouvent dans la const\n    // 'appRoutes'\n    ]]\n  });\n  return AppModule;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
