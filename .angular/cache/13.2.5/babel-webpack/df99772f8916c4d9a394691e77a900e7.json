{
  "ast": null,
  "code": "import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\n/**\r\n * CanActivate est une interface qui oblige à redefinir la methode canActivate\r\n *\r\n * @Injectable : permet de preparer un service et faire en sorte qu'on puisse y injecter un autre service\r\n */\n\nexport let AuthGuardService = /*#__PURE__*/(() => {\n  class AuthGuardService {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    /**\r\n     * Methode permettant d'empecher un user d'acceder à une ou plusieurs url que l'on defini sans etre authentifié.\r\n     * On retourne soit une Observable, soit une Promise, ou une booleenne à 'true' si l'user a le droit d'acceder à l'url (la route)\r\n     * voulue.Si ce n'est pas le cas, soit on peut retourner 'false', soit on peut rediriger l'user vers la page d'authentification\r\n     *\r\n     * @param route\r\n     * @param state\r\n     */\n\n\n    canActivate(route, state) {\n      if (this.authService.isAuth) {\n        return true;\n      } else {\n        this.router.navigate(['/auth']);\n      }\n    }\n\n  }\n\n  AuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n    return new (t || AuthGuardService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuardService,\n    factory: AuthGuardService.ɵfac\n  });\n  return AuthGuardService;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
