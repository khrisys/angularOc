{
  "ast": null,
  "code": "import { Validators } from '@angular/forms';\nimport { UserModel } from '../models/User.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/user-model.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\n\nfunction NewUserModelComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"input\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r2);\n  }\n}\n\nexport let NewUserModelComponent = /*#__PURE__*/(() => {\n  class NewUserModelComponent {\n    /**\r\n     * @param formBuilder : class Angular qui permet de creer des formulaires plus facilement, des objets de type FormGroup de maniere\r\n     * plus simple et plus lisible\r\n     * @param userModelService : injecte le service des UserModel\r\n     * @param router : permet la navigation vers une page voulue aores traitement des données\r\n     */\n    constructor(formBuilder, userModelService, router) {\n      this.formBuilder = formBuilder;\n      this.userModelService = userModelService;\n      this.router = router;\n    }\n\n    ngOnInit() {\n      this.initForm();\n    }\n    /**\r\n     * Initialise le formualire. On dit que l'objet de type FormGroup est egal au FormBuilder.group.\r\n     *\r\n     * Controls : Dans ce formulaire, on ajoute les controls (les attributs d'un userModel avec valeur par defaut à vides) qui seront dans le\r\n     * formulaire.\r\n     * Pour l'ajout dynamique des hobbies, on lui ajoute un formBuilder.array([]) vide.\r\n     *\r\n     * formBuilder.group() permet de creer un objet formulaire facilement (dont on peut ajouter les validators pour chaque champ, par ex).\r\n     *\r\n     * Validators : Pour chaque champ du formulaire, on indique avec les Validators qu'il faut que les champs soient remplis , sinon, on ne\r\n     * pourra passoumettre le le formulaire\r\n     */\n\n\n    initForm() {\n      this.userModelForm = this.formBuilder.group({\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        drinkPreference: ['', Validators.required],\n        hobbies: this.formBuilder.array([])\n      });\n    }\n    /**\r\n     * Soumission du formulaire avec le clic du bouton submit.\r\n     *\r\n     * Controls : Il n'y a pas besoin de passer d'argument car la methode reactive de Angular empeche de devoir creer une reference locale.\r\n     * Pour recuperer les valeurs du formulaire, on créé d'abord une form qui recupere les values = formValue. Puis, on créé un nouvel User\r\n     * correspondant au formValue ayant tous les attr de cet User. Pour les hobbies, comme  il se peut qu'il n'y en ait pas, il faut\r\n     * verifier : s'il y en a un ou plusieurs, on les ajout dans le formValue, sinon, on met un array vide.\r\n     * Ajout des valeurs du form au novel utilisateur\r\n     * Navigation jusqu'à la page des users\r\n     */\n\n\n    onSubmitForm() {\n      const formValue = this.userModelForm.value;\n      const newModelUser = new UserModel(formValue['firstName'], formValue['lastName'], formValue['email'], formValue['drinkPreference'], formValue['hobbies'] ? formValue['hobbies'] : []);\n      this.userModelService.addUserModel(newModelUser);\n      this.router.navigate(['/user-model-list']);\n    }\n    /**\r\n     * Pour des raisons de typage strict, on retourne le formArray sous forme de formArray\r\n     */\n\n\n    getHobbies() {\n      return this.userModelForm.get('hobbies');\n    }\n    /**\r\n     * Ajout d'un hobby\r\n     * On verifie ce control avec le Validators.required et avec une string vide. Ce qui signifie qu'à partir du moment ou j'ai créé un\r\n     * hobby, le champ devient requis.\r\n     * La methode getHobbies() utilisée ici permet d'avoir acces au formArray.\r\n     */\n\n\n    onAddHobby() {\n      const newHobbyControl = this.formBuilder.control(null, Validators.required);\n      this.getHobbies().push(newHobbyControl);\n    }\n\n  }\n\n  NewUserModelComponent.ɵfac = function NewUserModelComponent_Factory(t) {\n    return new (t || NewUserModelComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserModelService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  NewUserModelComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NewUserModelComponent,\n    selectors: [[\"app-new-user-model\"]],\n    decls: 30,\n    vars: 3,\n    consts: [[1, \"col-sm-8\", \"col-sm-offset-2\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"firstName\"], [\"formControlName\", \"firstName\", \"id\", \"firstName\", \"type\", \"text\", 1, \"form-control\"], [\"for\", \"lastName\"], [\"formControlName\", \"lastName\", \"id\", \"lastName\", \"type\", \"text\", 1, \"form-control\"], [\"for\", \"email\"], [\"formControlName\", \"email\", \"id\", \"email\", \"type\", \"text\", 1, \"form-control\"], [\"for\", \"drinkPreference\"], [\"formControlName\", \"drinkPreference\", \"id\", \"drinkPreference\", 1, \"form-control\"], [\"value\", \"jus d\\\\'orange\"], [\"value\", \"jus de mangue\"], [\"formArrayName\", \"hobbies\"], [\"class\", \"form-group\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"text\", 1, \"form-control\", 3, \"formControlName\"]],\n    template: function NewUserModelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function NewUserModelComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.onSubmitForm();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"label\", 3);\n        i0.ɵɵtext(4, \"Pr\\u00E9nom\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 2)(7, \"label\", 5);\n        i0.ɵɵtext(8, \"Nom\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 7);\n        i0.ɵɵtext(12, \"Adresse e-mail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 2)(15, \"label\", 9);\n        i0.ɵɵtext(16, \"Quelle boisson pr\\u00E9f\\u00E9rez-vous ?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"select\", 10)(18, \"option\", 11);\n        i0.ɵɵtext(19, \"Jus d'orange\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"option\", 12);\n        i0.ɵɵtext(21, \"Jus de mangue\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(22, \"div\", 13)(23, \"h3\");\n        i0.ɵɵtext(24, \"Vos hobbies\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, NewUserModelComponent_div_25_Template, 2, 1, \"div\", 14);\n        i0.ɵɵelementStart(26, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function NewUserModelComponent_Template_button_click_26_listener() {\n          return ctx.onAddHobby();\n        });\n        i0.ɵɵtext(27, \"Ajouter un hobby \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"button\", 16);\n        i0.ɵɵtext(29, \"Soumettre \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.userModelForm);\n        i0.ɵɵadvance(24);\n        i0.ɵɵproperty(\"ngForOf\", ctx.getHobbies().controls);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.userModelForm.invalid);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.SelectControlValueAccessor, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.FormArrayName, i4.NgForOf],\n    styles: [\"\"]\n  });\n  return NewUserModelComponent;\n})();",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
